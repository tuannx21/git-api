!function i(a,c,u){function l(t,e){if(!c[t]){if(!a[t]){var r="function"==typeof require&&require;if(!e&&r)return r(t,!0);if(s)return s(t,!0);var n=new Error("Cannot find module '"+t+"'");throw n.code="MODULE_NOT_FOUND",n}var o=c[t]={exports:{}};a[t][0].call(o.exports,function(e){return l(a[t][1][e]||e)},o,o.exports,i,a,c,u)}return c[t].exports}for(var s="function"==typeof require&&require,e=0;e<u.length;e++)l(u[e]);return l}({1:[function(e,t,r){"use strict";var a=e("./promiseAPI"),o="git-access-key",i=document.querySelector("#input-access-key"),c=document.querySelector("#userAvatar"),u=document.querySelector("#userName"),l=document.querySelector("#userEmail"),s=document.querySelector("#repoList"),d=function(){s.innerHTML=null,l.innerHTML=null,u.innerHTML=null,c.src=null},n=function(){i.addEventListener("keypress",function(e){if(13===e.which||13===e.keyCode){d();var t=i.value;r=o,n=t,window.localStorage.setItem(r,JSON.stringify(n)),h(t),i.value=""}var r,n})},h=function(e){d();var t,r=void 0===e?(t=o,JSON.parse(window.localStorage.getItem(t))).toString():e;(0,a.getUser)(r).then(function(e){var t,r,n,o,i;r=(t=e).name,n=t.login,o=t.email,i=t.avatar_url,c.src=i,u.innerHTML=r||n,l.innerHTML=o}),(0,a.getAllRepos)(r).then(function(e){var i;i=r,e.map(function(t){var e=document.querySelector("#repo-template").content.cloneNode(!0),r=e.querySelector("li"),n=r.querySelector("#repoName"),o=r.querySelector("#btnRemoveRepo");r.id=t.id,n.value=t.name,n.addEventListener("dblclick",function(){this.readOnly=!1}),n.addEventListener("keypress",function(e){13!==e.which&&13!==e.keyCode||(this.readOnly=!0,(0,a.renameRepo)(i,t.owner.login,t.name,this.value).then(alert("U have edited success, it may take a while to completely rename")))}),o.addEventListener("click",function(){!0===confirm("you sure you want to delete repo ".concat(t.name," ?????"))&&((0,a.deleteRepo)(i,t.owner.login,t.name),h())}),s.appendChild(e)})})};h(),n()},{"./promiseAPI":2}],2:[function(e,t,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.deleteRepo=r.createRepo=r.renameRepo=r.getAllRepos=r.getUser=r.callAPI=void 0;r.callAPI=function(e,t,r){return fetch("https://api.github.com/".concat(e),{method:t,headers:{Authorization:"Bearer cae334db7b05a0aa274dc562a81e698d53673d5f"},body:null==r?null:JSON.stringify(r)}).then(function(e){return e.json()})};r.getUser=function(e){return fetch("https://api.github.com/user",{headers:{Authorization:"Bearer ".concat(e)}}).then(function(e){return e.json()})};r.getAllRepos=function(e){return fetch("https://api.github.com/user/repos",{headers:{Authorization:"Bearer ".concat(e)}}).then(function(e){return e.json()})};r.renameRepo=function(e,t,r,n){return fetch("https://api.github.com/repos/".concat(t,"/").concat(r),{method:"PATCH",headers:{Authorization:"Bearer ".concat(e)},body:JSON.stringify({name:n})})};r.createRepo=function(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{name:"Repo-create-by-api"};return fetch("https://api.github.com/user/repos",{method:"POST",headers:{Authorization:"Bearer ".concat(e)},body:JSON.stringify(t)})};r.deleteRepo=function(e,t,r){return fetch("https://api.github.com/repos/".concat(t,"/").concat(r),{method:"DELETE",headers:{Authorization:"Bearer ".concat(e)}}).then(alert("done but it will take a while to completely delete on github")).catch(function(e){alert("errorrrrrr")})}},{}]},{},[1]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
