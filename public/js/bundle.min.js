!function i(u,c,a){function l(n,e){if(!c[n]){if(!u[n]){var r="function"==typeof require&&require;if(!e&&r)return r(n,!0);if(s)return s(n,!0);var t=new Error("Cannot find module '"+n+"'");throw t.code="MODULE_NOT_FOUND",t}var o=c[n]={exports:{}};u[n][0].call(o.exports,function(e){return l(u[n][1][e]||e)},o,o.exports,i,u,c,a)}return c[n].exports}for(var s="function"==typeof require&&require,e=0;e<a.length;e++)l(a[e]);return l}({1:[function(e,n,r){"use strict";var t=document.querySelector("#input-access-key"),l=document.querySelector("#userAvatar"),s=document.querySelector("#userName"),h=document.querySelector("#userEmail"),d=document.querySelector("#repoList"),o=function c(a){var e;(e=a,fetch("https://api.github.com/user",{headers:{Authorization:"Bearer ".concat(e)}}).then(function(e){return e.json()})).then(function(n){var e,r,t,o,i,u;r=(e=n).name,t=e.login,o=e.email,i=e.avatar_url,l.src=i,s.innerHTML=r||t,h.innerHTML=o,(u=a,fetch("https://api.github.com/user/repos",{headers:{Authorization:"Bearer ".concat(u)}}).then(function(e){return e.json()})).then(function(e){return e.filter(function(e){return e.owner.login===n.login})}).then(function(e){e.map(function(i){var e=document.querySelector("#repo-template").content.cloneNode(!0),n=e.querySelector("li"),r=n.querySelector("#repoName");n.id=i.id,r.value=i.name,r.addEventListener("dblclick",function(){this.readOnly=!1}),r.addEventListener("keypress",function(e){var n,r,t,o;13!==e.which&&13!==e.keyCode||(n=a,r=i.owner.login,t=i.name,o=this.value,fetch("https://api.github.com/repos/".concat(r,"/").concat(t),{method:"PATCH",headers:{Authorization:"Bearer ".concat(n)},body:JSON.stringify({name:o})})).then(alert("U have edited success")).then(c(a))}),d.appendChild(e)})})}).catch("something wrong happened, abort change")};t.addEventListener("keypress",function(e){13!==e.which&&13!==e.keyCode||(d.innerHTML=null,h.innerHTML=null,s.innerHTML=null,l.src=null,o(t.value),t.value="")})},{}]},{},[1]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
