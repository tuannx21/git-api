!function i(c,u,a){function s(t,e){if(!u[t]){if(!c[t]){var r="function"==typeof require&&require;if(!e&&r)return r(t,!0);if(l)return l(t,!0);var n=new Error("Cannot find module '"+t+"'");throw n.code="MODULE_NOT_FOUND",n}var o=u[t]={exports:{}};c[t][0].call(o.exports,function(e){return s(c[t][1][e]||e)},o,o.exports,i,c,u,a)}return u[t].exports}for(var l="function"==typeof require&&require,e=0;e<a.length;e++)s(a[e]);return s}({1:[function(e,t,r){"use strict";var i=e("./promiseAPI"),o="git-access-key",c=document.querySelector("#input-access-key"),u=document.querySelector("#userAvatar"),a=document.querySelector("#userName"),s=document.querySelector("#userEmail"),l=document.querySelector("#repoList"),d=function(){l.innerHTML=null,s.innerHTML=null,a.innerHTML=null,u.src=null},n=function(){c.addEventListener("keypress",function(e){if(13===e.which||13===e.keyCode){d();var t=c.value;r=o,n=t,window.localStorage.setItem(r,JSON.stringify(n)),f(t),c.value=""}var r,n})},f=function(e){d();var t,r=void 0===e?(t=o,JSON.parse(window.localStorage.getItem(t))).toString():e;(0,i.getUser)(r).then(function(e){var t,r,n,o,i;r=(t=e).name,n=t.login,o=t.email,i=t.avatar_url,u.src=i,a.innerHTML=r||n,s.innerHTML=o}),(0,i.getAllRepos)(r).then(function(e){var o;o=r,e.map(function(t){var e=document.querySelector("#repo-template").content.cloneNode(!0),r=e.querySelector("li"),n=r.querySelector("#repoName");r.id=t.id,n.value=t.name,n.addEventListener("dblclick",function(){this.readOnly=!1}),n.addEventListener("keypress",function(e){13!==e.which&&13!==e.keyCode||(this.readOnly=!0,(0,i.renameRepo)(o,t.owner.login,t.name,this.value).then(alert("U have edited success, it may take a while to completely rename")))}),l.appendChild(e)})}).catch(function(e){alert("can get repos")})};f(),n()},{"./promiseAPI":2}],2:[function(e,t,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.renameRepo=r.getAllRepos=r.getUser=void 0;r.getUser=function(e){return fetch("https://api.github.com/user",{headers:{Authorization:"Bearer ".concat(e)}}).then(function(e){return e.json()})};r.getAllRepos=function(e){return fetch("https://api.github.com/user/repos",{headers:{Authorization:"Bearer ".concat(e)}}).then(function(e){return e.json()})};r.renameRepo=function(e,t,r,n){return fetch("https://api.github.com/repos/".concat(t,"/").concat(r),{method:"PATCH",headers:{Authorization:"Bearer ".concat(e)},body:JSON.stringify({name:n})})}},{}]},{},[1]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
